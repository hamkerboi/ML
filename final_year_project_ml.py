# -*- coding: utf-8 -*-
"""final_year_project_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1143-EfrW0S8F4O8ro-TkCYF6008C4pXt
"""

import pandas as pd
df = pd.read_csv('/content/Combined.csv')
df.head(),df.info(),df.describe()

# Convert 'Length' to numeric, setting errors='coerce' will convert non-convertible values to NaN
df['Length'] = pd.to_numeric(df['Length'], errors='coerce')

# Check the conversion and display any remaining missing values
df.info(), df.isnull().sum()

print(df['Destination'].shape)
print(df['Protocol'].shape)
print(df['Tcp_Flags'].shape)
print(df['Label'].shape)

# # from sklearn.impute import SimpleImputer

# # Initialize the imputer for mode imputation
# mode_imputer = SimpleImputer(strategy='most_frequent')

# # List of categorical columns to impute
# columns_to_impute = ['Destination', 'Protocol', 'Tcp_Flags', 'Label']

# # Apply mode imputation to each categorical column
# for column in columns_to_impute:
#     if column in df.columns:
#         # Ensure the data is reshaped to (-1, 1)
#         df[column] = mode_imputer.fit_transform(df[column].values.reshape(-1, 1))
#     else:
#         print(f"Column {column} does not exist in the DataFrame.")

from sklearn.impute import SimpleImputer

# Initialize the imputer for mode imputation
mode_imputer = SimpleImputer(strategy='most_frequent')

# List of categorical columns you mentioned
columns_to_impute = ['Destination', 'Protocol', 'Tcp_Flags', 'Label']

# Before applying the imputation, let's ensure no column is completely NaN and print data types
print(df[columns_to_impute].isnull().sum())  # Check NaN counts in each column
print(df[columns_to_impute].dtypes)          # Data types of each column

# Apply mode imputation directly without reshaping manually
for column in columns_to_impute:
    if column in df.columns:
        try:
            # Impute directly using the column data
            df[column] = mode_imputer.fit_transform(df[[column]])  # Use double brackets to maintain DataFrame slice
        except Exception as e:
            print(f"Error processing {column}: {e}")
    else:
        print(f"Column {column} does not exist in the DataFrame.")

# After imputation, let's see if there are any remaining NaN values
print("\nAfter imputation:")
print(df[columns_to_impute].isnull().sum())

# Display a summary of the dataset to review changes
print(df.describe(include='all'))
print(df.info())

df.isnull().sum()

# Check if entire columns are NaN and print column names
print("Columns entirely NaN:", df.columns[df.isnull().all()])

# Fill completely NaN columns with a placeholder if necessary
df['Tcp_Flags'].fillna('Unknown', inplace=True)

# Re-check other columns where mode imputation might have failed
columns_to_recheck = ['Destination', 'Protocol', 'Label']
for column in columns_to_recheck:
    if df[column].isnull().any():
        # Re-impute or fill with a placeholder
        df[column].fillna('Unknown', inplace=True)

# Final check on null values
print(df.isnull().sum())

# Force convert 'Length' to numeric, coercing errors to NaN
df['Length'] = pd.to_numeric(df['Length'], errors='coerce')

# Re-check if there are still NaN values
print("NaN counts after conversion:", df['Length'].isnull().sum())

# If NaN values exist, compute and fill with the median of the column
if df['Length'].isnull().any():
    median_value = df['Length'].median()
    df['Length'].fillna(median_value, inplace=True)

# Final check for 'Length'
print("Final NaN check for 'Length':", df['Length'].isnull().sum())

df.isnull().sum()

# from sklearn.preprocessing import OneHotEncoder

# # OneHotEncoder setup
# encoder = OneHotEncoder(sparse=False)

# # Columns to encode
# categorical_columns = ['Source', 'Destination', 'Protocol', 'Tcp_Flags']

# # Apply OneHotEncoding to categorical columns
# encoded_data = pd.DataFrame(encoder.fit_transform(df[categorical_columns]))

# # Get new column names from encoder
# encoded_data.columns = encoder.get_feature_names(categorical_columns)

# # Drop original columns from data and concatenate encoded columns
# data_encoded = df.drop(categorical_columns, axis=1)
# data_encoded = pd.concat([data_encoded, encoded_data], axis=1)

# data_encoded.head()
from sklearn.preprocessing import OneHotEncoder
import pandas as pd

# Initialize the OneHotEncoder
# Set 'sparse_output=False' if you want a dense numpy array instead of a sparse matrix
encoder = OneHotEncoder(sparse_output=False)

# List of categorical columns
categorical_columns = ['Source', 'Destination', 'Protocol', 'Tcp_Flags']

# Apply OneHotEncoding
encoded_data = encoder.fit_transform(df[categorical_columns])

# Create a DataFrame from the encoded data
encoded_data = pd.DataFrame(encoded_data)

# Use the new method to get feature names
encoded_data.columns = encoder.get_feature_names_out(categorical_columns)

# If you had previous columns that are not categorical and need to be included:
remaining_columns = df.drop(columns=categorical_columns)
df_encoded = pd.concat([remaining_columns, encoded_data], axis=1)

print(df_encoded.head())

from sklearn.model_selection import train_test_split

# Separating the features and the target variable
X = df_encoded.drop('Label', axis=1)
y = df_encoded['Label']

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Verifying the sizes of the splits
X_train.shape, X_test.shape, y_train.shape, y_test.shape

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Initialize the Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the classifier
rf_classifier.fit(X_train, y_train)

# Predict on the test set
y_pred = rf_classifier.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)

# Generate the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

accuracy, conf_matrix

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming y_test is your true labels and y_pred are the predictions
conf_matrix = confusion_matrix(y_test, y_pred)
# Plotting the confusion matrix
plt.figure(figsize=(10, 7))  # Set the figure size
sns.heatmap(conf_matrix, annot=True, fmt='g', cmap='Blues', cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()





# Assuming you have class names
class_names = ['Normal', 'Scan', 'DoS']  # Adjust these to your actual class names

sns.heatmap(conf_matrix, annot=True, fmt='g', cmap='Blues', cbar=False,
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

from sklearn.preprocessing import label_binarize
from sklearn.metrics import roc_curve, auc

# Assuming your classes are labeled as 'Normal', 'Scan', 'DoS'
classes = ['Normal', 'Scan', 'DoS']
y_test_binarized = label_binarize(y_test, classes=classes)  # Convert y_test to a binary format

# Get the probability scores of each class
y_score = rf_classifier.predict_proba(X_test)

# Compute ROC curve and ROC area for each class
fpr = {}
tpr = {}
roc_auc = {}
for i in range(len(classes)):
    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_score[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))
colors = ['blue', 'green', 'red']
for i, color in zip(range(len(classes)), colors):
    plt.plot(fpr[i], tpr[i], color=color, lw=2,
             label='ROC curve of class {0} (area = {1:0.2f})'.format(classes[i], roc_auc[i]))

plt.plot([0, 1], [0, 1], 'k--', lw=2)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for each class')
plt.legend(loc="lower right")
plt.show()

from sklearn.model_selection import learning_curve
import numpy as np
import matplotlib.pyplot as plt

# Function to plot learning curves
def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,
                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):
    plt.figure()
    plt.title(title)
    if ylim is not None:
        plt.ylim(*ylim)
    plt.xlabel("Training examples")
    plt.ylabel("Score")
    train_sizes, train_scores, test_scores = learning_curve(
        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)
    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)
    plt.grid()

    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,
                     train_scores_mean + train_scores_std, alpha=0.1,
                     color="r")
    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,
                     test_scores_mean + test_scores_std, alpha=0.1, color="g")
    plt.plot(train_sizes, train_scores_mean, 'o-', color="r",
             label="Training score")
    plt.plot(train_sizes, test_scores_mean, 'o-', color="g",
             label="Cross-validation score")

    plt.legend(loc="best")
    return plt

# Plot learning curve
cv = 5  # Cross-validation folds
title = "Learning Curves (Random Forest)"
plot_learning_curve(rf_classifier, title, X, y, ylim=(0.7, 1.01), cv=cv, n_jobs=-1)
plt.show()

from sklearn.metrics import classification_report
# Evaluate on training data
train_predictions = rf_classifier.predict(X_train)
print("Training Data Classification Report:")
print(classification_report(y_train, train_predictions))

# Evaluate on testing data (already calculated)
print("Testing Data Classification Report:")
print(classification_report(y_test, y_pred))

from joblib import dump, load

# Assuming 'classifier' is your trained model
dump(rf_classifier, 'model.joblib')

from sklearn.ensemble import RandomForestClassifier

# Regularized Random Forest
classifier = RandomForestClassifier(
    n_estimators=100,  # Keep a reasonable number of trees
    max_depth=10,  # Limit the depth of each tree
    min_samples_split=10,  # Minimum number of samples required to split a node
    min_samples_leaf=4,  # Minimum number of samples required at each leaf node
    max_features='sqrt',  # Number of features to consider at each split
    max_leaf_nodes=None,  # Maximum number of leaf nodes (None means unlimited)
    random_state=42
)

classifier.fit(X_train, y_train)

# Evaluate the new regularized model
from sklearn.metrics import classification_report

train_predictions = classifier.predict(X_train)
test_predictions = classifier.predict(X_test)

print("Training Data Classification Report:")
print(classification_report(y_train, train_predictions))

print("Testing Data Classification Report:")
print(classification_report(y_test, test_predictions))

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# Predictions
train_predictions = classifier.predict(X_train)
test_predictions = classifier.predict(X_test)

# Calculate accuracy
train_accuracy = accuracy_score(y_train, train_predictions)
test_accuracy = accuracy_score(y_test, test_predictions)

# Print accuracy
print(f"Training Accuracy: {train_accuracy}")
print(f"Testing Accuracy: {test_accuracy}")

# Confusion Matrix
conf_mat = confusion_matrix(y_test, test_predictions)

# Print classification report
print("\nClassification Report for Testing Data:")
print(classification_report(y_test, test_predictions))

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_mat, annot=True, fmt='g', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

from sklearn.model_selection import learning_curve

def plot_learning_curve(estimator, X, y, cv):
    train_sizes, train_scores, validation_scores = learning_curve(
        estimator, X, y, train_sizes=np.linspace(0.1, 1.0, 10), cv=cv, scoring='accuracy')

    # Calculate means and standard deviations
    train_scores_mean = np.mean(train_scores, axis=1)
    validation_scores_mean = np.mean(validation_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    validation_scores_std = np.std(validation_scores, axis=1)

    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,
                     train_scores_mean + train_scores_std, alpha=0.1, color="r")
    plt.fill_between(train_sizes, validation_scores_mean - validation_scores_std,
                     validation_scores_mean + validation_scores_std, alpha=0.1, color="g")

    plt.plot(train_sizes, train_scores_mean, 'o-', color="r", label="Training score")
    plt.plot(train_sizes, validation_scores_mean, 'o-', color="g", label="Cross-validation score")

    plt.xlabel("Training examples")
    plt.ylabel("Score")
    plt.legend(loc="best")
    plt.title('Learning Curves')
    plt.show()

# Plot the learning curve
cv = 5  # Number of cross-validation folds
plot_learning_curve(classifier, X_train, y_train, cv)





import matplotlib.pyplot as plt

# Get feature importances from the model
feature_importances = rf_classifier.feature_importances_

# Create a DataFrame to visualize them
features_df = pd.DataFrame({
    'Feature': X_train.columns,
    'Importance': feature_importances
})

# Sort the DataFrame by importance
features_df = features_df.sort_values(by='Importance', ascending=False)

# Plotting the feature importances
plt.figure(figsize=(10, 8))
plt.barh(features_df['Feature'], features_df['Importance'], color='skyblue')
plt.xlabel('Importance')
plt.title('Feature Importance')
plt.gca().invert_yaxis()  # Invert y-axis to have the most important at the top
plt.show()

